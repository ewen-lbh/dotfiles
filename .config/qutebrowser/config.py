from pathlib import Path
CURRENT_COLOR_SCHEME = (Path.home() / ".config"/"current_color_scheme").read_text().strip()
# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(True)

# How to open links in an existing instance if a new one is launched.
# This happens when e.g. opening a link from a terminal. See
# `new_instance_open_target_window` to customize in which window the
# link is opened in.
# Type: String
# Valid values:
#   - tab: Open a new tab in the existing window and activate the window.
#   - tab-bg: Open a new background tab in the existing window and activate the window.
#   - tab-silent: Open a new tab in the existing window without activating the window.
#   - tab-bg-silent: Open a new background tab in the existing window without activating the window.
#   - window: Open in a new window.
#   - private-window: Open in a new private window.
c.new_instance_open_target = 'window'

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version} Edg/{upstream_browser_version}', 'https://accounts.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Allow JavaScript to read from or write to the clipboard. With
# QtWebEngine, writing the clipboard as response to a user interaction
# is always allowed.
# Type: Bool
c.content.javascript.can_access_clipboard = True

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications.enabled', True, 'https://calendar.google.com')

# Allow pdf.js to view PDF files in the browser. Note that the files can
# still be downloaded by clicking the download button in the pdf.js
# viewer.
# Type: Bool
c.content.pdfjs = False

# Allow websites to register protocol handlers via
# `navigator.registerProtocolHandler`.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.register_protocol_handler', True, 'https://calendar.google.com?cid=%25s')

# Characters used for hint strings.
# Type: UniqueCharString
c.hints.chars = 'qsdfghjklm'

# Background color of the tab bar.
# Type: QssColor
c.colors.tabs.bar.bg = '#ffffff'

# Value to use for `prefers-color-scheme:` for websites. The "light"
# value is only available with QtWebEngine 5.15.2+. On older versions,
# it is the same as "auto". The "auto" value is broken on QtWebEngine
# 5.15.2 due to a Qt bug. There, it will fall back to "light"
# unconditionally.
# Type: String
# Valid values:
#   - auto: Use the system-wide color scheme setting.
#   - light: Force a light theme.
#   - dark: Force a dark theme.
c.colors.webpage.preferred_color_scheme = CURRENT_COLOR_SCHEME

# Render all web contents using a dark theme. Example configurations
# from Chromium's `chrome://flags`:  - "With simple HSL/CIELAB/RGB-based
# inversion": Set   `colors.webpage.darkmode.algorithm` accordingly.  -
# "With selective image inversion": Set
# `colors.webpage.darkmode.policy.images` to `smart`.  - "With selective
# inversion of non-image elements": Set
# `colors.webpage.darkmode.threshold.text` to 150 and
# `colors.webpage.darkmode.threshold.background` to 205.  - "With
# selective inversion of everything": Combines the two variants   above.
# Type: Bool
c.colors.webpage.darkmode.enabled = CURRENT_COLOR_SCHEME == "dark"

# Which algorithm to use for modifying how colors are rendered with
# darkmode. The `lightness-cielab` value was added with QtWebEngine 5.14
# and is treated like `lightness-hsl` with older QtWebEngine versions.
# Type: String
# Valid values:
#   - lightness-cielab: Modify colors by converting them to CIELAB color space and inverting the L value. Not available with Qt < 5.14.
#   - lightness-hsl: Modify colors by converting them to the HSL color space and inverting the lightness (i.e. the "L" in HSL).
#   - brightness-rgb: Modify colors by subtracting each of r, g, and b from their maximum value.
c.colors.webpage.darkmode.algorithm = 'lightness-cielab'

# Which pages to apply dark mode to. The underlying Chromium setting has
# been removed in QtWebEngine 5.15.3, thus this setting is ignored
# there. Instead, every element is now classified individually.
# Type: String
# Valid values:
#   - always: Apply dark mode filter to all frames, regardless of content.
#   - smart: Apply dark mode filter to frames based on background color.
c.colors.webpage.darkmode.policy.page = 'always'

# Default font families to use. Whenever "default_family" is used in a
# font setting, it's replaced with the fonts listed here. If set to an
# empty value, a system-specific monospace default is used.
# Type: List of Font, or Font
c.fonts.default_family = "Product Sans"

# Default font size to use. Whenever "default_size" is used in a font
# setting, it's replaced with the size listed here. Valid values are
# either a float value with a "pt" suffix, or an integer value with a
# "px" suffix.
# Type: String
c.fonts.default_size = "11pt"

# Font used for the hints.
# Type: Font
c.fonts.hints = 'default_size default_family'

# Bindings for normal mode
config.bind(',M', 'hint links spawn mpv {hint-url}')
config.bind(',m', 'spawn mpv {url}')
config.bind(';c', 'hint links right-click')
config.bind('gkp', 'open https://{url:path}')
config.bind('gr', 'greasemonkey-reload')
config.bind('gytdl', 'hint links spawn youtube-dl -x --audio-format mp3 "{hint-url}"')
config.bind('pkg', 'open pkg.go.dev/{url:host}{url:path}')
config.bind('pw', 'spawn --userscript ~/.config/qutebrowser/userscripts/qute-bitwarden')

# Per-site passthrough mode override
for domain in ["design.penpot.app", "github.dev"]:
    config.set("input.mode_override", "passthrough", domain)

fore="#000000"
lightfore="#555555"
back="#ffffff"
altback="#E0E0E0"
darkback="#bdbdbd"
accent="#2962FF"

# Background color of the completion widget category headers.
c.colors.completion.category.bg = darkback
# Bottom border color of the completion widget category headers.
c.colors.completion.category.border.bottom = darkback
# Top border color of the completion widget category headers.
c.colors.completion.category.border.top = darkback
# Foreground color of completion widget category headers.
c.colors.completion.category.fg = fore
## Background color of the completion widget for even rows.
c.colors.completion.even.bg = altback
## Text color of the completion widget.
c.colors.completion.fg = fore
## Background color of the selected completion item.
c.colors.completion.item.selected.bg = accent
## Bottom border color of the selected completion item.
c.colors.completion.item.selected.border.bottom = accent
## Top border color of the selected completion item.
c.colors.completion.item.selected.border.top = accent
## Foreground color of the selected completion item.
c.colors.completion.item.selected.fg = back
## Foreground color of the matched text in the selected completion item.
c.colors.completion.item.selected.match.fg = back
## Foreground color of the matched text in the completion.
c.colors.completion.match.fg = accent
## Background color of the completion widget for odd rows.
c.colors.completion.odd.bg = back
## Color of the scrollbar in the completion view.
c.colors.completion.scrollbar.bg = back
## Color of the scrollbar handle in the completion view.
c.colors.completion.scrollbar.fg = fore
## Background color of disabled items in the context menu.
#c.colors.contextmenu.disabled.bg = ""
## Foreground color of disabled items in the context menu.
#c.colors.contextmenu.disabled.fg = ""
## Background color of the context menu.
#c.colors.contextmenu.menu.bg = ""
## Foreground color of the context menu.
#c.colors.contextmenu.menu.fg = ""
## Background color of the context menu’s selected item.
#c.colors.contextmenu.selected.bg = ""
## Foreground color of the context menu’s selected item.
#c.colors.contextmenu.selected.fg = ""
## Background color for the download bar.
#c.colors.downloads.bar.bg = ""
## Background color for downloads with errors.
#c.colors.downloads.error.bg = ""
## Foreground color for downloads with errors.
#c.colors.downloads.error.fg = ""
## Color gradient start for download backgrounds.
#c.colors.downloads.start.bg = ""
## Color gradient start for download text.
#c.colors.downloads.start.fg = ""
## Color gradient stop for download backgrounds.
#c.colors.downloads.stop.bg = ""
## Color gradient end for download text.
#c.colors.downloads.stop.fg = ""
## Color gradient interpolation system for download backgrounds.
#c.colors.downloads.system.bg = ""
## Color gradient interpolation system for download text.
#c.colors.downloads.system.fg = ""
## Background color for hints.
c.colors.hints.bg = accent
## Font color for hints.
c.colors.hints.fg = back
## Font color for the matched part of hints.
c.colors.hints.match.fg = darkback
## Background color of the keyhint widget.
#c.colors.keyhint.bg = ""
## Text color for the keyhint widget.
#c.colors.keyhint.fg = ""
## Highlight color for keys to complete the current keychain.
#c.colors.keyhint.suffix.fg = ""
## Background color of an error message.
#c.colors.messages.error.bg = ""
## Border color of an error message.
#c.colors.messages.error.border = ""
## Foreground color of an error message.
#c.colors.messages.error.fg = ""
## Background color of an info message.
#c.colors.messages.info.bg = ""
## Border color of an info message.
#c.colors.messages.info.border = ""
## Foreground color of an info message.
#c.colors.messages.info.fg = ""
## Background color of a warning message.
#c.colors.messages.warning.bg = ""
## Border color of a warning message.
#c.colors.messages.warning.border = ""
## Foreground color of a warning message.
#c.colors.messages.warning.fg = ""
## Background color for prompts.
#c.colors.prompts.bg = ""
## Border used around UI elements in prompts.
#c.colors.prompts.border = ""
## Foreground color for prompts.
#c.colors.prompts.fg = ""
## Background color for the selected item in filename prompts.
#c.colors.prompts.selected.bg = ""
## Foreground color for the selected item in filename prompts.
#c.colors.prompts.selected.fg = ""
## Background color of the statusbar in caret mode.
#c.colors.statusbar.caret.bg = ""
## Foreground color of the statusbar in caret mode.
#c.colors.statusbar.caret.fg = ""
## Background color of the statusbar in caret mode with a selection.
#c.colors.statusbar.caret.selection.bg = ""
## Foreground color of the statusbar in caret mode with a selection.
#c.colors.statusbar.caret.selection.fg = ""
## Background color of the statusbar in command mode.
#c.colors.statusbar.command.bg = ""
## Foreground color of the statusbar in command mode.
#c.colors.statusbar.command.fg = ""
## Background color of the statusbar in private browsing + command mode.
#c.colors.statusbar.command.private.bg = ""
## Foreground color of the statusbar in private browsing + command mode.
#c.colors.statusbar.command.private.fg = ""
## Background color of the statusbar in insert mode.
#c.colors.statusbar.insert.bg = ""
## Foreground color of the statusbar in insert mode.
#c.colors.statusbar.insert.fg = ""
## Background color of the statusbar.
c.colors.statusbar.normal.bg = back
## Foreground color of the statusbar.
c.colors.statusbar.normal.fg = fore
## Background color of the statusbar in passthrough mode.
#c.colors.statusbar.passthrough.bg = ""
## Foreground color of the statusbar in passthrough mode.
#c.colors.statusbar.passthrough.fg = ""
## Background color of the statusbar in private browsing mode.
#c.colors.statusbar.private.bg = ""
## Foreground color of the statusbar in private browsing mode.
#c.colors.statusbar.private.fg = ""
## Background color of the progress bar.
#c.colors.statusbar.progress.bg = ""
## Foreground color of the URL in the statusbar on error.
#c.colors.statusbar.url.error.fg = ""
## Default 		foreground color of the URL in the statusbar.
c.colors.statusbar.url.fg = fore
## Foreground color of the URL in the statusbar for hovered links.
c.colors.statusbar.url.hover.fg = accent
## Foreground color of the URL in the statusbar on successful load (http).
c.colors.statusbar.url.success.http.fg = fore
## Foreground color of the URL in the statusbar on successful load (https).
c.colors.statusbar.url.success.https.fg = fore
## Foreground color of the URL in the statusbar when there’s a warning.
c.colors.statusbar.url.warn.fg = fore
## Background color of the tab bar.
c.colors.tabs.bar.bg = altback
## Background color of unselected even tabs.
c.colors.tabs.even.bg = back
## Foreground color of unselected even tabs.
c.colors.tabs.even.fg = lightfore
## Color for the tab indicator on errors.
#c.colors.tabs.indicator.error = ""
## Color gradient start for the tab indicator.
#c.colors.tabs.indicator.start = ""
## Color gradient end for the tab indicator.
#c.colors.tabs.indicator.stop = ""
## Color gradient interpolation system for the tab indicator.
#c.colors.tabs.indicator.system = ""
## Background color of unselected odd tabs.
c.colors.tabs.odd.bg = back
## Foreground color of unselected odd tabs.
c.colors.tabs.odd.fg = lightfore
## Background color of pinned unselected even tabs.
c.colors.tabs.pinned.even.bg = back
## Foreground color of pinned unselected even tabs.
c.colors.tabs.pinned.even.fg = accent
## Background color of pinned unselected odd tabs.
c.colors.tabs.pinned.odd.bg = back
## Foreground color of pinned unselected odd tabs.
c.colors.tabs.pinned.odd.fg = accent
## Background color of pinned selected even tabs.
c.colors.tabs.pinned.selected.even.bg = back
## Foreground color of pinned selected even tabs.
c.colors.tabs.pinned.selected.even.fg = back
## Background color of pinned selected odd tabs.
c.colors.tabs.pinned.selected.odd.bg = accent
## Foreground color of pinned selected odd tabs.
c.colors.tabs.pinned.selected.odd.fg = back
## Background color of selected even tabs.
c.colors.tabs.selected.even.bg = accent
## Foreground color of selected even tabs.
c.colors.tabs.selected.even.fg = back
## Background color of selected odd tabs.
c.colors.tabs.selected.odd.bg = accent
## Foreground color of selected odd tabs.
c.colors.tabs.selected.odd.fg = back
## Background color for webpages if unset (or empty to use the theme’s color).
#c.colors.webpage.bg = ""
## Which algorithm to use for modifying how colors are rendered with darkmode.
#c.colors.webpage.darkmode.algorithm = ""
## Contrast for dark mode.
#c.colors.webpage.darkmode.contrast = ""
## Render all web contents using a dark theme.
#c.colors.webpage.darkmode.enabled = ""
## Render all colors as grayscale.
#c.colors.webpage.darkmode.grayscale.all = ""
## Desaturation factor for images in dark mode.
#c.colors.webpage.darkmode.grayscale.images = ""
## Which images to apply dark mode to.
#c.colors.webpage.darkmode.policy.images = ""
## Which pages to apply dark mode to.
#c.colors.webpage.darkmode.policy.page = ""
## Threshold for inverting background elements with dark mode.
#c.colors.webpage.darkmode.threshold.background = ""
## Threshold for inverting text with dark mode.
#c.colors.webpage.darkmode.threshold.text = ""
## Value to use for prefers-color-scheme: for websites.
#c.colors.webpage.preferred_color_scheme = ""
